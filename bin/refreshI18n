#!/usr/bin/env node

var _ = require('lodash'),
    AssetGraph = require('../lib/AssetGraph'),
    i18nTools = require('../lib/i18nTools'),
    uglifyAst = require('uglifyast'),
    urlTools = require('urltools'),
    fs = require('fs'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] [--parentdir] --root <inputRootDirectory> --locales <localeId>,... <htmlFile>...')
        .boolean('parentdir')
        .demand(['root', 'locales'])
        .argv,
    localeIds = _.flatten(_.flatten([commandLineOptions.locales]).map(function (localeId) {
        return localeId.split(',');
    }));

new AssetGraph({root: commandLineOptions.root})
    .logEvents({repl: commandLineOptions.repl, stopOnWarning: commandLineOptions.stoponwarning, suppressJavaScriptCommonJsRequireWarnings: true})
    .registerLabelsAsCustomProtocols(commandLineOptions.label, {installFindParentDirectoryAsDefault: commandLineOptions.parentdir})
    .loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl))
    .populate({from: {type: 'Html'}, followRelations: {type: 'HtmlScript', to: {url: /^file:/}}})
    .populate({
        followRelations: {
            type: ['HtmlScript', 'HtmlRequireJsMain', 'JavaScriptInclude', 'JavaScriptAmdDefine', 'JavaScriptAmdRequire', 'JavaScriptGetText'],
            to: {url: AssetGraph.query.not(/^https?:/)}
        }
    })
    .queue(function (assetGraph) {
        // We don't want to overwrite the "initially dirty" assets, such as ext-base.js.
        assetGraph.findAssets({isDirty: true}).forEach(function (dirtyAsset) {
            dirtyAsset.isDirty = false;
        });
        var existingI18nRelations = assetGraph.findRelations({to: {type: 'I18n'}, from: {type: 'JavaScript'}}),
            occurrencesByKey = i18nTools.findOccurrences(assetGraph, assetGraph.findAssets({type: 'Html', isInitial: true}));

        _.keys(occurrencesByKey).forEach(function (key) {
            var occurrences = occurrencesByKey[key];
            if (occurrences.length > 1) {
                for (var i = 1 ; i < occurrences.length ; i += 1) {
                    if (!_.isEqual(occurrences[0].defaultValue, occurrences[1].defaultValue)) {
                        console.warn('Default values for ' + key + ' are different');
                    }
                }
            }
            var i18nAsset = i18nTools.getOrCreateI18nAssetForKey(assetGraph, key, occurrencesByKey);
            localeIds.forEach(function (localeId) {
                var prioritizedLocaleIds = i18nTools.expandLocaleIdToPrioritizedList(localeId);
                if (key in i18nAsset.parseTree) {
                    for (var i = 0 ; i < prioritizedLocaleIds.length ; i += 1) {
                        if (prioritizedLocaleIds[i] in i18nAsset.parseTree[key]) {
                            return; // Already found, don't do anything
                        }
                    }
                } else {
                    i18nAsset.parseTree[key] = {};
                }
                var leastSpecificLocaleId = prioritizedLocaleIds[prioritizedLocaleIds.length - 1],
                    value = null;
                if (leastSpecificLocaleId === 'en' && occurrences[0].defaultValue) {
                    value = /^i18nTag/.test(occurrences[0].type) ? occurrences[0].defaultValue : uglifyAst.astToObj(occurrences[0].defaultValue);
                }
                i18nAsset.parseTree[key][leastSpecificLocaleId] = value;
                console.log(i18nAsset.url + ': ' + key + ' already found, added entry for ' + leastSpecificLocaleId);
                i18nAsset.markDirty();
            });
        });

        // Find the JavaScript => I18n relations that didn't exist when we started:
        var newI18nRelationsByJavaScriptId = {};
        assetGraph.findRelations({to: {type: 'I18n'}, from: {type: 'JavaScript'}}).forEach(function (i18nRelation) {
            if (existingI18nRelations.indexOf(i18nRelation) === -1) {
                (newI18nRelationsByJavaScriptId[i18nRelation.from.id] = newI18nRelationsByJavaScriptId[i18nRelation.from.id] || []).push(i18nRelation);
            }
        });

        // Hack: Inject the new relations at the top of the file
        _.each(newI18nRelationsByJavaScriptId, function (i18nRelations, javaScriptId) {
            var javaScript = assetGraph.idIndex[javaScriptId],
                originalText = fs.readFileSync(urlTools.fileUrlToFsPath(javaScript.url), javaScript.encoding),
                oneIncludeStatements = i18nRelations.map(function (i18nRelation) {
                    return 'INCLUDE(\'' +
                        urlTools.buildRelativeUrl(i18nRelation.from.url || assetGraph.findBaseAssetForRelation(i18nRelation).url, i18nRelation.to.url) +
                        '\');\n';
                }).join(''),
                matchSplitAfterLastOneIncludeLine = originalText.match(/^([\s\S]*one\.include[^\n]*\n)([\s\S]*)$/),
                patchedText;
            if (matchSplitAfterLastOneIncludeLine) {
                patchedText = matchSplitAfterLastOneIncludeLine[1] + '\n' + oneIncludeStatements + matchSplitAfterLastOneIncludeLine[2];
            } else {
                patchedText = oneIncludeStatements + originalText;
            }
            fs.writeFileSync(urlTools.fileUrlToFsPath(javaScript.url), patchedText, javaScript.encoding);
        });
    })
    .prettyPrintAssets({type: 'I18n', isDirty: true})
    .writeStatsToStderr()
    .writeAssetsToDisc({type: 'I18n', isDirty: true})
    .run();
